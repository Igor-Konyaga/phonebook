{"version":3,"file":"static/js/952.b148b235.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contacts-page/Contact-form/ContactForm.module.css?d365","components/Contacts-page/Contact-form/ContactForm.jsx","webpack://react-homework-template/./src/components/Contacts-page/Contact-list/ContactList.module.css?97e9","webpack://react-homework-template/./src/components/Contacts-page/Contact-list/Contact/Contact.module.css?797b","components/Contacts-page/Contact-list/Contact/Contact.jsx","components/Contacts-page/Contact-list/ContactList.jsx","webpack://react-homework-template/./src/components/Contacts-page/ContactsPage.module.css?2ebe","webpack://react-homework-template/./src/components/Contacts-page/Filter/Filter.module.css?549c","components/Contacts-page/Filter/Filter.jsx","components/Contacts-page/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__wixM0\",\"input\":\"ContactForm_input__pInFh\",\"btn\":\"ContactForm_btn__uNDjK\"};","import { useForm } from 'react-hook-form';\nimport css from './ContactForm.module.css';\n// import Notiflix from 'notiflix';\n// import { RotatingLines } from 'react-loader-spinner';\nimport { useDispatch } from 'react-redux';\n// import { addContact, setIsLoadingForm } from 'redux/authReducer';\nimport { fetchAddContact } from 'redux/contactsReducer';\n\nexport const ContactForm = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const dispatch = useDispatch();\n\n  //   const isLoadingForm = useSelector(\n  //     state => state.contactsReducer.setIsLoadingForm\n  //   );\n\n  const onSubmit = contact => {\n    dispatch(fetchAddContact(contact));\n\n    reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit(onSubmit)}>\n      <input\n        className={css.input}\n        {...register('name', { required: true })}\n        type=\"text\"\n        placeholder=\"enter name\"\n      />\n      {errors.name && <span>This field is required</span>}\n\n      <input\n        className={css.input}\n        {...register('number', { required: true })}\n        type=\"text\"\n        placeholder=\"enter number\"\n      />\n      {errors.number && <span>This field is required</span>}\n\n      <button className={css.btn} type=\"submit\">\n        Add\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__w1+8T\",\"loader\":\"ContactList_loader__S60uv\"};","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"Contact_listItem__RR9tW\",\"itemName\":\"Contact_itemName__l9hKJ\",\"itemTel\":\"Contact_itemTel__Gw+De\",\"button\":\"Contact_button__H-BiK\"};","import { useDispatch } from 'react-redux';\nimport css from './Contact.module.css';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { useState } from 'react';\nimport Notiflix from 'notiflix';\nimport { fetchDeleteContact } from 'redux/contactsReducer';\n\nexport const Contact = ({ id, name, phone }) => {\n  const dispatch = useDispatch();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <li className={css.listItem}>\n      <p className={css.itemName}>{name}:</p>\n      <p className={css.itemTel}>{phone}</p>\n      <button\n        onClick={() => {\n\t\t\t  setIsLoading(true);\n\t\t\t  dispatch(fetchDeleteContact(id)\n\t\t\t  );\n\t\t\t  Notiflix.Notify.success(`Contact ${name} successfully deleted`)\n        }}\n        className={css.button}\n        type=\"button\"\n      >\n        {isLoading ? (\n          <RotatingLines\n            strokeColor=\"grey\"\n            strokeWidth=\"4\"\n            animationDuration=\"0.75\"\n            width=\"16\"\n            visible={true}\n          />\n        ) : (\n          'delete'\n        )}\n      </button>\n    </li>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { useEffect } from 'react';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { Contact } from './Contact/Contact';\nimport { fetchContacts } from 'redux/contactsReducer';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.contacts.filter);\n  const normalizeFilter = filter.toLowerCase().trim();\n\n  const isLoading = useSelector(\n    state => state.contacts.isLoading\n  );\n\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(normalizeFilter);\n  });\n\n  return (\n    <>\n      <ul className={css.list}>\n        {isLoading && (\n          <li className={css.loader}>\n            <RotatingLines\n              strokeColor=\"grey\"\n              strokeWidth=\"5\"\n              animationDuration=\"0.75\"\n              width=\"60\"\n              visible={true}\n            />\n          </li>\n        )}\n        {contacts.length > 0 &&\n          filteredContacts.map(contact => {\n            return (\n              <Contact\n                key={contact.id}\n                id={contact.id}\n                name={contact.name}\n                phone={contact.number}\n              />\n            );\n          })}\n      </ul>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsPage_section__Ky+ej\",\"wrapperFormFilter\":\"ContactsPage_wrapperFormFilter__3IMGV\"};","// extracted by mini-css-extract-plugin\nexport default {\"filterSection\":\"Filter_filterSection__v11Iu\",\"input\":\"Filter_input__U4XFY\"};","import { useDispatch } from 'react-redux';\nimport css from './Filter.module.css';\nimport { setFilter } from 'redux/contactsReducer';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    const filterName = e.target.value;\n    dispatch(setFilter(filterName));\n  };\n\n  return (\n    <div className={css.filterSection}>\n        <input\n          className={css.input}\n          onChange={handleFilter}\n          type=\"text\"\n          placeholder=\"find contacts by name\"\n        />\n    </div>\n  );\n};\n","import { ContactForm } from './Contact-form/ContactForm';\nimport { ContactList } from './Contact-list/ContactList';\nimport css from './ContactsPage.module.css';\nimport { Filter } from './Filter/Filter';\n\nconst ContactsPage = () => {\n  return (\n    <section className={css.section}>\n      <div className={css.wrapperFormFilter}>\n        <Filter />\n        <ContactForm />\n      </div>\n      <ContactList />\n    </section>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactForm","_useForm","useForm","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","_jsxs","className","css","onSubmit","contact","fetchAddContact","children","_jsx","_objectSpread","required","type","placeholder","name","number","Contact","_ref","id","phone","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","onClick","fetchDeleteContact","Notiflix","concat","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","ContactList","contacts","useSelector","state","normalizeFilter","filter","toLowerCase","trim","useEffect","fetchContacts","filteredContacts","includes","_Fragment","length","map","Filter","onChange","e","filterName","target","value","setFilter"],"sourceRoot":""}